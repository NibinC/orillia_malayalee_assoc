<div class="row justify-content-center">
  <div class="col-lg-6 col-md-8">
    <div class="card shadow-lg border-0">
      <div class="card-body p-4">
        <h2 class="text-center mb-4 text-success fw-bold">Event Registration</h2>

        <%= form_with model: [@event, @registration], local: true, html: { id: "registration-form" } do |f| %>
          <% if @registration.errors.any? %>
            <div class="alert alert-danger">
              <div class="d-flex align-items-start">
                <i class="fas fa-exclamation-triangle me-2 mt-1"></i>
                <div>
                  <strong>Please fix the following errors:</strong>
                  <ul class="mb-0 mt-2">
                    <% @registration.errors.full_messages.each do |msg| %>
                      <li><%= msg %></li>
                    <% end %>
                    <% @registration.attendees.each_with_index do |a,i| %>
                      <% a.errors.full_messages.each do |msg| %>
                        <li><strong>Attendee <%= i+1 %>:</strong> <%= msg %></li>
                      <% end %>
                    <% end %>
                  </ul>
                </div>
              </div>
            </div>
          <% end %>

          <div class="mb-3">
            <%= f.label :first_name, "First Name", class: "form-label fw-semibold" %>
            <%= f.text_field :first_name, class: "form-control", placeholder: "Enter your first name", required: true %>
          </div>

          <div class="mb-3">
            <%= f.label :last_name, "Last Name", class: "form-label fw-semibold" %>
            <%= f.text_field :last_name, class: "form-control", placeholder: "Enter your last name", required: true %>
          </div>

          <div class="mb-3">
            <%= f.label :email, "Email Address", class: "form-label fw-semibold" %>
            <%= f.email_field :email, class: "form-control", placeholder: "example@email.com", required: true %>
          </div>

          <div class="mb-4">
            <h5 class="fw-semibold mb-3">Attendees</h5>
            <div class="alert alert-info py-2 mb-3">
              <small><i class="fas fa-info-circle me-1"></i>
                Date of birth determines pricing automatically. Only name and DOB required.
              </small>
            </div>
            
            <!-- Desktop Headers (hidden on mobile) -->
            <div class="row mb-2 d-none d-md-flex">
              <div class="col-md-4"><small class="text-muted fw-semibold">First Name</small></div>
              <div class="col-md-4"><small class="text-muted fw-semibold">Last Name</small></div>
              <div class="col-md-3"><small class="text-muted fw-semibold">Date of Birth</small></div>
              <div class="col-md-1"></div>
            </div>
            
            <div id="attendees">
              <%= f.fields_for :attendees do |attendee_form| %>
                <div class="attendee-row mb-4 p-3 border rounded">
                  <%= attendee_form.hidden_field :id %>
                  <%= attendee_form.hidden_field :category, value: attendee_form.object.category || 'adult' %>
                  <%= attendee_form.hidden_field :_destroy, value: 0, class: 'destroy-flag' %>
                  
                  <!-- Mobile: Stacked Layout -->
                  <div class="d-md-none">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                      <strong class="text-primary">Attendee</strong>
                      <button type="button" class="btn btn-link text-danger remove-attendee-btn p-0" title="Remove">
                        <i class="fas fa-times fa-lg"></i>
                      </button>
                    </div>
                    
                    <div class="mb-3">
                      <label class="form-label fw-semibold text-muted">First Name</label>
                      <%= attendee_form.text_field :first_name, class: "form-control", placeholder: "Enter first name" %>
                    </div>
                    
                    <div class="mb-3">
                      <label class="form-label fw-semibold text-muted">Last Name</label>
                      <%= attendee_form.text_field :last_name, class: "form-control", placeholder: "Enter last name" %>
                    </div>
                    
                    <div class="mb-2">
                      <label class="form-label fw-semibold text-muted">Date of Birth</label>
                      <%= attendee_form.date_field :dob, class: "form-control dob-field" %>
                      <small class="text-muted age-display mt-1 d-block"></small>
                    </div>
                  </div>
                  
                  <!-- Desktop: Row Layout -->
                  <div class="row g-2 align-items-start d-none d-md-flex">
                    <div class="col-md-4">
                      <%= attendee_form.text_field :first_name, class: "form-control", placeholder: "First Name" %>
                    </div>
                    <div class="col-md-4">
                      <%= attendee_form.text_field :last_name, class: "form-control", placeholder: "Last Name" %>
                    </div>
                    <div class="col-md-3">
                      <%= attendee_form.date_field :dob, class: "form-control dob-field" %>
                      <small class="text-muted age-display"></small>
                    </div>
                    <div class="col-md-1 text-end">
                      <button type="button" class="btn btn-link text-danger remove-attendee-btn p-0 mt-1" title="Remove">
                        <i class="fas fa-times"></i>
                      </button>
                    </div>
                  </div>
                </div>
              <% end %>
            </div>
            <button type="button" class="btn btn-outline-primary btn-sm" id="add-attendee">+ Add Another Attendee</button>
          </div>

          <div class="d-grid mt-4">
            <%= f.submit "Proceed to Summary", class: "btn btn-success btn-lg fw-semibold" %>
          </div>
        <% end %>
      </div>
    </div>
  </div>
</div>

<script>
function initRegistrationNewForm(){
  let attendeeCount = document.querySelectorAll('#attendees .attendee-row').length;

  function calculateAge(dob){
    if (!dob) return 0;
    const today = new Date();
    const birthDate = new Date(dob);
    let age = today.getFullYear() - birthDate.getFullYear();
    const monthDiff = today.getMonth() - birthDate.getMonth();
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
      age--;
    }
    return age;
  }
  
  function updateAgeAndCategory(dobField){
    if(!dobField.value) {
      const row = dobField.closest('.attendee-row');
      const ageDisplay = row.querySelector('.age-display');
      if(ageDisplay) ageDisplay.textContent = '';
      return;
    }
    
    const age = calculateAge(dobField.value);
    const category = age < 12 ? 'minor' : 'adult';
    const row = dobField.closest('.attendee-row');
    
    const ageDisplay = row.querySelector('.age-display');
    if(ageDisplay) {
      ageDisplay.innerHTML = `<i class="fas fa-birthday-cake me-1"></i>Age: <strong>${age}</strong> <span class="badge bg-${category === 'adult' ? 'primary' : 'warning'} ms-1">${category}</span>`;
    }
    
    const categoryHidden = row.querySelector('input[name*="[category]"]');
    if(categoryHidden) categoryHidden.value = category;
  }
  document.querySelectorAll('#attendees .dob-field').forEach(df=>{ df.addEventListener('change',()=>updateAgeAndCategory(df)); if(df.value) updateAgeAndCategory(df); });
  document.getElementById('attendees').addEventListener('click',e=>{ const btn=e.target.closest('.remove-attendee-btn'); if(!btn) return; const row=btn.closest('.attendee-row'); const destroy=row.querySelector('input[name*="[_destroy]"]'); if(destroy){ destroy.value='1'; row.style.display='none'; } else { row.remove(); } });
  const addBtn=document.getElementById('add-attendee'); 
  if(addBtn && !addBtn.dataset.bound){ 
    addBtn.dataset.bound='true'; 
    addBtn.addEventListener('click',()=>{ 
      const wrap=document.getElementById('attendees'); 
      const row=document.createElement('div'); 
      row.className='attendee-row mb-4 p-3 border rounded'; 
      row.innerHTML=`
        <input type='hidden' name='registration[attendees_attributes][${attendeeCount}][category]' value='adult'>
        <input type='hidden' name='registration[attendees_attributes][${attendeeCount}][_destroy]' value='0' class='destroy-flag'>
        
        <!-- Mobile: Stacked Layout -->
        <div class='d-md-none'>
          <div class='d-flex justify-content-between align-items-center mb-2'>
            <strong class='text-primary'>Attendee</strong>
            <button type='button' class='btn btn-link text-danger remove-attendee-btn p-0' title='Remove'>
              <i class='fas fa-times fa-lg'></i>
            </button>
          </div>
          
          <div class='mb-3'>
            <label class='form-label fw-semibold text-muted'>First Name</label>
            <input type='text' name='registration[attendees_attributes][${attendeeCount}][first_name]' class='form-control' placeholder='Enter first name'>
          </div>
          
          <div class='mb-3'>
            <label class='form-label fw-semibold text-muted'>Last Name</label>
            <input type='text' name='registration[attendees_attributes][${attendeeCount}][last_name]' class='form-control' placeholder='Enter last name'>
          </div>
          
          <div class='mb-2'>
            <label class='form-label fw-semibold text-muted'>Date of Birth</label>
            <input type='date' name='registration[attendees_attributes][${attendeeCount}][dob]' class='form-control dob-field'>
            <small class='text-muted age-display mt-1 d-block'></small>
          </div>
        </div>
        
        <!-- Desktop: Row Layout -->
        <div class='row g-2 align-items-start d-none d-md-flex'>
          <div class='col-md-4'>
            <input type='text' name='registration[attendees_attributes][${attendeeCount}][first_name]' class='form-control' placeholder='First Name'>
          </div>
          <div class='col-md-4'>
            <input type='text' name='registration[attendees_attributes][${attendeeCount}][last_name]' class='form-control' placeholder='Last Name'>
          </div>
          <div class='col-md-3'>
            <input type='date' name='registration[attendees_attributes][${attendeeCount}][dob]' class='form-control dob-field'>
            <small class='text-muted age-display'></small>
          </div>
          <div class='col-md-1 text-end'>
            <button type='button' class='btn btn-link text-danger remove-attendee-btn p-0 mt-1' title='Remove'>
              <i class='fas fa-times'></i>
            </button>
          </div>
        </div>`; 
      wrap.appendChild(row); 
      const dob=row.querySelector('.dob-field'); 
      dob.addEventListener('change',()=>updateAgeAndCategory(dob)); 
      attendeeCount++; 
      
      // Update required fields after adding new attendee
      updateRequiredFields();
    }); 
  }
  
  // Function to check if an element is actually visible (not just display rules)
  function isElementVisible(element) {
    if (!element) return false;
    
    // Check if element itself is hidden
    const style = window.getComputedStyle(element);
    if (style.display === 'none' || style.visibility === 'hidden') return false;
    
    // Check parent containers for bootstrap responsive classes
    let parent = element.parentElement;
    while (parent && parent !== document.body) {
      const parentStyle = window.getComputedStyle(parent);
      if (parentStyle.display === 'none' || parentStyle.visibility === 'hidden') return false;
      parent = parent.parentElement;
    }
    
    return true;
  }
  
  // Function to manage required attributes based on screen size
  function updateRequiredFields() {
    const isMobile = window.innerWidth < 768;
    
    // Clear all required attributes first
    const allFormFields = document.querySelectorAll('#registration-form input[type="text"], #registration-form input[type="email"], #registration-form input[type="date"]');
    allFormFields.forEach(field => {
      // Store original name attribute for restoration if needed
      if (field.name && !field.hasAttribute('data-original-name')) {
        field.setAttribute('data-original-name', field.name);
      }
      field.required = false;
    });
    
    // Set required only for visible fields
    allFormFields.forEach(field => {
      const fieldContainer = field.closest('.d-md-none, .d-none.d-md-flex');
      
      if (!fieldContainer) {
        // Always visible field (like main registration form fields)
        field.required = true;
      } else if (isElementVisible(field)) {
        // Only set required if the field is actually visible
        field.required = true;
      }
    });
  }
  
  // Update required fields on load and resize
  updateRequiredFields();
  window.addEventListener('resize', updateRequiredFields);
  
  // Add form submission handling
  const form = document.getElementById('registration-form');
  if (form) {
    form.addEventListener('submit', function(e) {
      console.log('Form submission attempted');
      
      // Update required fields right before validation
      updateRequiredFields();
      
      // CRITICAL FIX: Disable hidden form fields so they don't get submitted
      const allFormFields = form.querySelectorAll('input[type="text"], input[type="email"], input[type="date"]');
      allFormFields.forEach(field => {
        if (!isElementVisible(field)) {
          // Disable hidden fields so they won't be submitted to the server
          field.disabled = true;
          field.name = ''; // Also clear the name to prevent submission
        } else {
          // Ensure visible fields are enabled
          field.disabled = false;
        }
      });
      
      // Validate only visible required fields
      const visibleRequiredFields = Array.from(form.querySelectorAll('input[required]')).filter(field => isElementVisible(field));
      let hasErrors = false;
      let missingFields = [];
      
      visibleRequiredFields.forEach(field => {
        if (!field.value.trim()) {
          hasErrors = true;
          const label = field.closest('.mb-3, .col-md-4, .col-md-3')?.querySelector('label')?.textContent || 
                       field.placeholder || 
                       field.name || 
                       'Unknown field';
          missingFields.push(label);
          field.classList.add('is-invalid');
        } else {
          field.classList.remove('is-invalid');
        }
      });
      
      if (hasErrors) {
        e.preventDefault();
        
        // Re-enable all fields if validation fails
        allFormFields.forEach(field => {
          field.disabled = false;
          // Restore original name attributes
          if (field.hasAttribute('data-original-name')) {
            field.name = field.getAttribute('data-original-name');
          }
        });
        
        // Scroll to first error field
        const firstErrorField = form.querySelector('input.is-invalid');
        if (firstErrorField) {
          firstErrorField.scrollIntoView({ behavior: 'smooth', block: 'center' });
          firstErrorField.focus();
        }
        
        alert('Please fill in all required fields: ' + missingFields.join(', '));
        return false;
      }
      
      // Disable submit button to prevent double submission
      const submitBtn = form.querySelector('input[type="submit"]');
      if (submitBtn) {
        submitBtn.disabled = true;
        submitBtn.value = 'Processing...';
        
        // Re-enable after 10 seconds as fallback
        setTimeout(() => {
          if (submitBtn.disabled) {
            submitBtn.disabled = false;
            submitBtn.value = 'Proceed to Summary';
          }
        }, 10000);
      }
      
      console.log('Form validation passed, submitting with only visible fields...');
    });
    
    // Add touch event handling for better mobile experience
    const submitBtn = form.querySelector('input[type="submit"]');
    if (submitBtn) {
      submitBtn.addEventListener('touchstart', function() {
        this.style.backgroundColor = '#198754';
      });
      
      submitBtn.addEventListener('touchend', function() {
        this.style.backgroundColor = '';
      });
    }
  }
}
addEventListener('turbo:load', initRegistrationNewForm);
addEventListener('DOMContentLoaded', initRegistrationNewForm);
</script>
